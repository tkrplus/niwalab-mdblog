{"data":{"site":{"siteMetadata":{"title":"Niwa-Lab Blog","author":"tkrplus"}},"markdownRemark":{"id":"957218c9-b515-5d8e-9e38-f8c2f57b55b5","excerpt":"Srping Fest 概要 http://springfest2018.springframework.jp/ Sessions KEYNOTE　ああああああああああああああ エンタープライズ・マイクロサービスの格言 Agenda…","html":"<h1>Srping Fest 概要</h1>\n<p><a href=\"http://springfest2018.springframework.jp/\">http://springfest2018.springframework.jp/</a></p>\n<h1>Sessions</h1>\n<h2>KEYNOTE　ああああああああああああああ</h2>\n<h2>エンタープライズ・マイクロサービスの格言</h2>\n<p>Agenda</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>エンタープライズ系システムのマイクロサービス化、それが、エンタープライズ・マイクロサービス。 Spring Fest 2017の「日本一やさしいマイクロサービス入門」の続編的ハナシとして、エンタープライズ・マイクロサービスを上手くやるための格言などを噺します。 真面目なセッションで疲れてしまった貴方の頭が休まるセッション(!?)。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>プロジェクトをスケールする手段として、マイクロサービス(MS)化を選んでいきたいなと思っているこの頃。\nエンタープライズ向けマイクロサービスというタイトルに惹かれて参加。</p>\n<p>一応、自分が担当しているプロジェクトはマイクロサービスといえるのかな…？と思う。</p>\n<p>「オブジェクト指向がわからないのに、マイクロサービスに飛びついてもできる訳がない」という言葉には完全に同意。</p>\n<p>自分も「マイクロサービスってなんですか？」って聞かれてたときに\nプログラムでオブジェクト指向がベストプラクティスとされてますよね。\nそれをサービスレベルでオブジェクト指向していった結果がマイクロサービスだと思う。\nといったりする。</p>\n<h3>企画編</h3>\n<p>エンタープライズ経過得意なSI企業はマイクロサービス・アーキテクチャでのシステム開発に向かない。\n理由：開発の方法がレガシー。MSは試行錯誤が多いので、管理を重んじるSI企業ではスピード感で出ずにより難しくなっている。</p>\n<p>MSの切り分けの単位は、最初は主観的な粒度で良い\n必要があれば、徐々に粒度を細かくすれば良い。（大きくなってきたら、分割するみたいな考え方？）\nその際に、ドメイン駆動設計(DDD)を取り入ればなお良い。</p>\n<p>開発プロセスはアジャイルが良い。\n基本的にMSは探索的な開発になるので、手戻りが難しいウォーターフォール(WF)型は難しいんじゃないかなというところ。\n個人的にも、ちょっとした失敗・手戻りでも管理をしなきゃいけないWF型はMSに向かないと思ってる。</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>エンターブライズなシステム開発では、技術スキルの低さが問題となる。\n優秀なチームリーダを配置することで最低限の品質をチームリーダで保証していく。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>チーム単位では、技術レベルの高さは求められるのがMSなので、\nこれも１つの解決方法なのかなーと思ったりする。</p>\n<h3>開発編</h3>\n<p>共通処理はやめる。\n業務ロジックなどの共通処理を作ってしまうと、サービス間で結合が生まれてしまう。\n共通処理を作るくらいなら、別MSとして切り出せないか考えたほうが良い。</p>\n<p>実際の開発では、共通処理を作るべきか否かは、その処理の大きさによるのかなと思った。\nその損益分岐点となる</p>\n<p>MSはテストをちゃんと作らなければならない。\nMSの進化を短時間で行うためには、リグレッションを保証していくことが必要。\nCI環境の重要性はWF型よりも大切になってくる。</p>\n<p>UTの実行速度は大切。（プルリクでUT時間かかりすぎてマージできない問題）\n<code class=\"language-text\">@SpringBootTest</code> は時間がかかりすぎる（不要にAPサーバを起動しない</p>\n<p>マイクロサービスでは、トランザクションの難しさはある。\nそもそも、トランザクションの難度を下げるような設計思想を持ったほうがいいと気持ちを改めた。</p>\n<h1>Tips</h1>\n<ul>\n<li>技術評論社「間違いだらけのソフトウェア・アーキテクチャ」</li>\n</ul>","frontmatter":{"title":"Spring Fest 2018 参加レポート","date":"October 31, 2018"}}},"pageContext":{"slug":"/20181031/","previous":{"fields":{"slug":"/20181023/"},"frontmatter":{"title":"GatsbyでBlogを始めてみました。"}},"next":null}}