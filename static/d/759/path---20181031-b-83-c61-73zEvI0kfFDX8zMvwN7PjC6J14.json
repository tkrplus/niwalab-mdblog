{"data":{"site":{"siteMetadata":{"title":"Niwa-Lab Blog","author":"tkrplus"}},"markdownRemark":{"id":"957218c9-b515-5d8e-9e38-f8c2f57b55b5","excerpt":"イベント概要 日時： 2018年10月31日 10:00 - 18:30 場所： 両国　KFCホール（チキンとは関係なかた） URL：  http://springfest2018.springframework.jp/ 主催：Spring…","html":"<h1>イベント概要</h1>\n<ul>\n<li>日時： 2018年10月31日 10:00 - 18:30</li>\n<li>場所： 両国　KFCホール（チキンとは関係なかた）</li>\n<li>URL： <a href=\"http://springfest2018.springframework.jp/\">http://springfest2018.springframework.jp/</a></li>\n<li>主催：Spring日本ユーザ会。その他スポンサーは割とTech系とSIer系とIT教育系</li>\n</ul>\n<h1>どんなイベントだった？</h1>\n<p>今回のイベントでのホットワードは以下の３つかなと個人的に感じた</p>\n<ul>\n<li>Micro Service</li>\n<li>Serverless</li>\n<li>Agile</li>\n</ul>\n<p>個人的にはこの3つは切り離せない関係にあると思っている。\nマイクロサービスを実現するには、小さいチームでも成り立つようにサーバレスで運用作業を軽減する。\nマイクロサービスを実現するために、小さいチームのパフォーマンスをアジャイルで最大化する。</p>\n<p>特にJava系のイベントということで、他の勉強会に比べて堅いというかレガシーというか、\nそういったところに所属している参加者が多かった。\nただ、硬くレガシーな人も課題感はもっており、転換するためにどうするか？\nという考えを持ってSpringに向き合いに来た感じはあった。</p>\n<p>意外にKotlinに対する興味は皆持っているようだった。\n自分も参加したが、Kotlinに関するセッションでは立ち見がかなり発生していた。\n懇親会でも、Kotlinどう思う？みたいな話はちょくちょくあった。</p>\n<p>後述しますが、Kotlin x SpringBoot2.0は試したことがあり、良い印象をもっている。\nKotlinはゆくゆく導入したいなーという考えがあるので、ちゃんとアンテナをはっておこうと思った。</p>\n<p>最後に普通の感想として…</p>\n<p>同じSI系の人と話ができたのが嬉しかった。\n特に、SIの古さを感じて「どうにかしたい！」と思っている人と会話できたのが、\n今回最大の収穫でした。</p>\n<p>あと、FLUX、Reactiveに対する誤解が溶けたのも地味に良い収穫だった。笑</p>\n<h1>Sessions</h1>\n<h2>エンタープライズ・マイクロサービスの格言</h2>\n<p>Agenda</p>\n<blockquote>\n<p>エンタープライズ系システムのマイクロサービス化、それが、エンタープライズ・マイクロサービス。 Spring Fest 2017の「日本一やさしいマイクロサービス入門」の続編的ハナシとして、エンタープライズ・マイクロサービスを上手くやるための格言などを噺します。 真面目なセッションで疲れてしまった貴方の頭が休まるセッション(!?)。</p>\n</blockquote>\n<p>プロジェクトをスケールする手段として、マイクロサービス(MS)化を選んでいきたいなと思っているこの頃。\nエンタープライズ向けマイクロサービスというタイトルに惹かれて参加。</p>\n<p>一応、自分が担当しているプロジェクトはマイクロサービスといえるのかな…？と思う。</p>\n<p>「オブジェクト指向がわからないのに、マイクロサービスに飛びついてもできる訳がない」という言葉には完全に同意。</p>\n<p>自分も「マイクロサービスってなんですか？」って聞かれてたときに\nプログラムでオブジェクト指向がベストプラクティスとされてますよね。\nそれをサービスレベルでオブジェクト指向していった結果がマイクロサービスだと思う。\nといったりする。</p>\n<h3>企画編</h3>\n<p>エンタープライズ経過得意なSI企業はマイクロサービス・アーキテクチャでのシステム開発に向かない。\n理由：開発の方法がレガシー。MSは試行錯誤が多いので、管理を重んじるSI企業ではスピード感で出ずにより難しくなっている。</p>\n<p>MSの切り分けの単位は、最初は主観的な粒度で良い\n必要があれば、徐々に粒度を細かくすれば良い。（大きくなってきたら、分割するみたいな考え方？）\nその際に、ドメイン駆動設計(DDD)を取り入ればなお良い。</p>\n<p>開発プロセスはアジャイルが良い。\n基本的にMSは探索的な開発になるので、手戻りが難しいウォーターフォール(WF)型は難しいんじゃないかなというところ。\n個人的にも、ちょっとした失敗・手戻りでも管理をしなきゃいけないWF型はMSに向かないと思ってる。</p>\n<blockquote>\n<p>エンターブライズなシステム開発では、技術スキルの低さが問題となる。\n優秀なチームリーダを配置することで最低限の品質をチームリーダで保証していく。</p>\n</blockquote>\n<p>チーム単位では、技術レベルの高さは求められるのがMSなので、\nこれも１つの解決方法なのかなーと思ったりする。</p>\n<h3>開発編</h3>\n<p>共通処理はやめる。\n業務ロジックなどの共通処理を作ってしまうと、サービス間で結合が生まれてしまう。\n共通処理を作るくらいなら、別MSとして切り出せないか考えたほうが良い。</p>\n<p>実際の開発では、共通処理を作るべきか否かは、その処理の大きさによるのかなと思った。\nその損益分岐点の見極めはアーキテクトとしての腕の見せどころかな。</p>\n<p>MSはテストをちゃんと作らなければならない。\nMSの進化を短時間で行うためには、リグレッションを保証していくことが必要。\nCI環境の重要性はWF型よりも大切になってくる。</p>\n<p>UTの実行速度は大切。（プルリクでUT時間かかりすぎてマージできない問題）\n<code class=\"language-text\">@SpringBootTest</code> は時間がかかりすぎる（不要にAPサーバを起動しない</p>\n<p>マイクロサービスでは、トランザクションの難しさはある。\nそもそも、トランザクションの難度を下げるような設計思想を持ったほうがいいと気持ちを改めた。</p>\n<h2>実際のプロジェクトでSpringアプリをKotlinで開発して得た気づき集</h2>\n<p>Speacker: <a href=\"https://taro.hatenablog.jp/\">https://taro.hatenablog.jp/</a>\nAgenda:</p>\n<blockquote>\n<p>SpringはかねてよりKotlinをサポートしていましたが、Spring Framework 5.0でよりKotlinフレンドリなAPIを提供し始めました。本セッションでは、SpringアプリをKotlinで開発する基本的な話と、実際の開発を経験して得られた知見をTips集のような形で共有します。\n本セッションを聴いていただき、Kotlinへの関心を高め、Kotlin x Springにありがちな落とし穴を回避する策を学んでいただければ幸いです。</p>\n</blockquote>\n<h3>KotlinでSpringアプリを始める</h3>\n<p><code class=\"language-text\">@Service</code> などがついたクラスはSpringによってサブクラスが生成される。\nそのため、デフォルトでfinal classなKotlinは気をつけないといけない。\nこれでは開発しづらいので、kotlin-springプラグインを使用すると良い。\nKotlin-spingプラグインはSpring Anotationのついたクラスをallopenの対象として扱ってくれる。</p>\n<p>Validationに注意。\n<code class=\"language-text\">@NonNull</code> のようなものは <code class=\"language-text\">@field:Notnull</code>としてやる必要がある。\nKotlinがJavaにコンパイルされたときの形を考える必要がまだ何箇所かである。</p>\n<p>int? はInteger, intはint扱いになるので、注意しよう。</p>\n<h3>WebFluxとコルーチン</h3>\n<p>リアクターなところを、コルーチンを使用すると可読性を上げることができる。\nコルーチンってなんだ？＝ asyncとかawaitとかやつ？</p>\n<p>JSでPromiseの可読性が悪くなるので、async, awaitを使ってあげましょう。\nという話と似たものがありそう。</p>\n<h3>アノテーションをやめる</h3>\n<p>アノテーションを削除する代わりに、自分でBean登録してやろうという話。</p>\n<p>以下、サンプルコード</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">SpringAppicationBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">sources</span><span class=\"token punctuation\">(</span>DemoApplication<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">initializers</span><span class=\"token punctuation\">(</span>beans <span class=\"token punctuation\">{</span>\n      bean <span class=\"token punctuation\">{</span> <span class=\"token function\">DemoService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n      bean <span class=\"token punctuation\">{</span> <span class=\"token function\">DemoController</span><span class=\"token punctuation\">(</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// DIは型推論によって解決してくれる</span>\n      bean <span class=\"token punctuation\">{</span>\n        router <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ref<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>DemoController<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">helloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 型推論ができないものは自身で設定</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span></code></pre></div>\n<p>アノテーションに馴染んでいるものからすると、あまりメリットを感じない。</p>\n<h3>テスト！</h3>\n<p>Kotlinテスト周辺ツールは下記らしい。</p>\n<ul>\n<li>\n<p>JUnit5</p>\n<ul>\n<li><code class=\"language-text\">@Nested</code>を使用した、メソッドグルーピングがわかりやすい。（Javaでも使用可能）</li>\n<li>JUnit5になったことで、最近のプログラミング言語っぽく技術ができるようになってそうに見えた。</li>\n</ul>\n</li>\n<li>AssertJ</li>\n<li>MockK</li>\n<li>DbSetup-kotlin</li>\n</ul>\n<p>Kotlin 1.3から文脈からNotNullを推定してくれる機能がついた。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if(item != null) {\n  item.name // 従来はitem?.nameという記述が必要だった。\n}</code></pre></div>\n<p>MockitoでKotlinクラスをmockしようとして失敗したのは良い思い出。\n<code class=\"language-text\">final</code>だったからできなかったのだが、MockKを使用すればmockできるそうな。</p>\n<h3>感想</h3>\n<p>Kotlin1.1 x SpringBoot2.0を2018年3月くらいに触ったことがあります。\n当時は、ちょっと使いづらいなぁという部分がいくつかありました。\n半年経ってKotlin1.3はだいぶ進化していて、PJで使えるようになってそうと感じた。</p>\n<h2>Knative: Serving your Serverless Java Service on Kubernetes the 12-Factor way</h2>\n<p><a href=\"https://slidr.io/kameshsampath/knative-serving-your-serverless-services#1\">https://slidr.io/kameshsampath/knative-serving-your-serverless-services#1</a>\n<a href=\"https://blog.openshift.com/knative-serving-your-serverless-services/\">https://blog.openshift.com/knative-serving-your-serverless-services/</a>\n<a href=\"https://blog.openshift.com/knative-building-your-serverless-service/\">https://blog.openshift.com/knative-building-your-serverless-service/</a>\n<a href=\"https://blog.openshift.com/knative-configurations-routes-and-revisions/\">https://blog.openshift.com/knative-configurations-routes-and-revisions/</a></p>\n<p>Japanese Nativeには辛い英語セッションでした。</p>\n<p>Knativeは強力そう。ということが分かったので帰ったら調べてみたいと思うところ。</p>\n<h2>基礎からのOAuth 2.0とSpring Security 5.1による実装</h2>\n<p>Agenda:</p>\n<blockquote>\n<p>OAuth 2.0は、Web APIでよく利用される認可プロトコルです。Spring Securityでは、5.0でクライアント機能、5.1でリソースサーバー機能が追加されました。このセッションでは、前半でOAuth 2.0についてはじめから丁寧に解説します。そして後半では、Spring Security5.1のクライアント機能やリソースサーバー機能を、実装例を交えながら紹介します。認可サーバーはDocker + Keycloakで構築します）\nOAuth2.0の名前を聞いたことはあるけど詳細は知らない・・・という方にピッタリのセッションです。</p>\n</blockquote>\n<p>Spring Sercurity 5.0から、OAuth2.0を標準搭載。\n以前はSpring Sercurity OAuth2等を使用していた。\nSpring Sercurity 5はクライント・リソースサーバ側のみ対応。認可サーバは5.2以降から順次展開予定\n（ただし、少しずつ認可機能が追加されるので、フル機能をもった認可はまだ先の話だそうな。</p>\n<p>Spring Sercurity OAuthは分かりづらいという話があったが、ホントにそうだと思う。</p>\n<p>実際、ドキュメント少なすぎて生のソースコードを読み解いて理解したのは良い思い出。\n今回、SpringがOAuth機能を新たに作り直してSpring Security標準搭載させたのは英断だと思ってる。</p>\n<p>近いうちに、Spring Security 5系を使って、クライアントサーバを試してみようかなと。</p>\n<p>使用していたpackageたち。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring-security-oauth-client\nspring-security-oauth-resource</code></pre></div>\n<h1>Tips</h1>\n<ul>\n<li>技術評論社「間違いだらけのソフトウェア・アーキテクチャ」</li>\n<li>オライリー「effective devops」</li>\n</ul>","frontmatter":{"title":"Spring Fest 2018 参加レポート","date":"October 31, 2018"}}},"pageContext":{"slug":"/20181031/","previous":{"fields":{"slug":"/20181023/"},"frontmatter":{"title":"GatsbyでBlogを始めてみました。"}},"next":{"fields":{"slug":"/20181101/"},"frontmatter":{"title":"React会 #1 参加レポート"}}}}