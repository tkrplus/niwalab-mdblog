<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Niwa-Lab Blog]]></title><description><![CDATA[A blog]]></description><link>https://tkrplus.github.io/niwalab-mdblog/</link><generator>RSS for Node</generator><lastBuildDate>Sat, 10 Nov 2018 07:51:30 GMT</lastBuildDate><item><title><![CDATA[Kubernetes Metetup #14 参加レポート]]></title><description><![CDATA[はじめに Kubernetes Meetup Tokyoに参加してきました。 現在の業務では kubernetes は使用していませんが、今後は使用する可能性があります。
今、扱っているプロダクトがスケールする前には   は入れておきたいと改めて思わされました。 k8s…]]></description><link>https://tkrplus.github.io/niwalab-mdblog//20181108/</link><guid isPermaLink="false">https://tkrplus.github.io/niwalab-mdblog//20181108/</guid><pubDate>Thu, 08 Nov 2018 09:50:06 GMT</pubDate><content:encoded>&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Kubernetes Meetup Tokyoに参加してきました。&lt;/p&gt;
&lt;p&gt;現在の業務では kubernetes は使用していませんが、今後は使用する可能性があります。
今、扱っているプロダクトがスケールする前には &lt;code class=&quot;language-text&quot;&gt;k8s&lt;/code&gt; は入れておきたいと改めて思わされました。&lt;/p&gt;
&lt;p&gt;k8s meetupは7月頃に参加して以来です。
それまで数回開催されていましたが、2回抽選落ちしての3回ぶり参加でした。
開催されるごとに抽選倍率が上がっているような気がします。
ちなみに、今回の倍率は3倍くらいだったので確率としてはあってますね。笑&lt;/p&gt;
&lt;h2&gt;イベント概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;日時: 2018年11月8日&lt;/li&gt;
&lt;li&gt;場所: Google 東京オフィス&lt;/li&gt;
&lt;li&gt;URL: &lt;a href=&quot;https://k8sjp.connpass.com/event/104450/&quot;&gt;https://k8sjp.connpass.com/event/104450/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;About: Kubernetes Meetup Tokyo #14を開催します！ コンテナをデプロイできる強力なシステム Kubernetes のことを詳しく聞く会です！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;セッション一覧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quipper のマイクロサービス化への道のり&lt;/li&gt;
&lt;li&gt;CacooはなぜKubernetesによるmicroservicesへの道を選んだのか？&lt;/li&gt;
&lt;li&gt;Athenzを用いたKubernetes Webhook Authorization&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;個人的には &lt;code class=&quot;language-text&quot;&gt;k8s&lt;/code&gt; を若干使用したことがあります。
学習コストはあったものの、インフラ周りの運用が格段に楽になったなと感じました。
実際にプロジェクトで &lt;code class=&quot;language-text&quot;&gt;k8s&lt;/code&gt; を使用しているところではどんな課題があるのだろうと探るために参加しました。&lt;/p&gt;
&lt;p&gt;今回のイベントでは、 &lt;code class=&quot;language-text&quot;&gt;k8s&lt;/code&gt; の導入事例の紹介が中心でした。
1年程前の k8s meetup の内容は内部技術的な話が多かったと思います。
そう考えると、 &lt;code class=&quot;language-text&quot;&gt;k8s&lt;/code&gt; は普及期に入ってきたような気がします。&lt;/p&gt;
&lt;p&gt;普及期といっても日本のIT業界の上位5％の中での話な気がしますが…
そういった感じで、日本のIT業界内で2極化が進んでいるなと思う今日このごろです。&lt;/p&gt;
&lt;p&gt;学習コストを払って楽をしていかないと、逆に将来で苦労することになると考えています。
今、レガシーなオンプレ環境にいる会社がいきなり k8s を導入するなんて無理ですよね。
（すげー頑張ればできるかもしれないけど、確実に燃える）
順当な手順としては&lt;code class=&quot;language-text&quot;&gt;PublicCloud&lt;/code&gt;に切り替えて &lt;code class=&quot;language-text&quot;&gt;Docker&lt;/code&gt;を使用し &lt;code class=&quot;language-text&quot;&gt;k8s&lt;/code&gt; を導入するだと思います。
そうやって、1つずつ階段を登るように追従していっておいた方が安全なはず。
将来的に崖みたいな段差を登るようなことがないようにしたいものだと思います。
2極化で取り残された側には崖を登れず廃れている未来がきっと待ってます。&lt;/p&gt;
&lt;p&gt;ということで、将来に行き場がなくならないよう頑張っていこうというのが私の最近のモチベーションです。笑&lt;/p&gt;
&lt;p&gt;懇親会は &lt;code class=&quot;language-text&quot;&gt;k8s&lt;/code&gt; を使用していると会話ができ、かなり勉強になりました。
ただ、業務で扱っていない技術での懇親会は話を噛み合わせられないことが多くヤキモキしますね。
もっと勉強してから来ましょう。
ってとこなので、もうちょっと &lt;code class=&quot;language-text&quot;&gt;k8s&lt;/code&gt; 勉強して行きたいと思います。&lt;/p&gt;
&lt;h1&gt;Tips&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Monorepo&lt;/li&gt;
&lt;li&gt;Ansible&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protocol Buffers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サービス間のデータスキーマ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[React会 #1 参加レポート]]></title><description><![CDATA[イベントの概要 日時： 2018年11月1日 19:30 - 21:30 場所： Mercari URL：  https://react-kai.connpass.com/event/102286/ どんな会だった？ 今回のホットワードは   でした。 会自体はLTが…]]></description><link>https://tkrplus.github.io/niwalab-mdblog//20181101/</link><guid isPermaLink="false">https://tkrplus.github.io/niwalab-mdblog//20181101/</guid><pubDate>Thu, 01 Nov 2018 10:37:48 GMT</pubDate><content:encoded>&lt;h1&gt;イベントの概要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;日時： 2018年11月1日 19:30 - 21:30&lt;/li&gt;
&lt;li&gt;場所： Mercari&lt;/li&gt;
&lt;li&gt;URL： &lt;a href=&quot;https://react-kai.connpass.com/event/102286/&quot;&gt;https://react-kai.connpass.com/event/102286/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;どんな会だった？&lt;/h1&gt;
&lt;p&gt;今回のホットワードは &lt;code class=&quot;language-text&quot;&gt;React Hooks&lt;/code&gt; でした。&lt;/p&gt;
&lt;p&gt;会自体はLTが6つと懇親会といった、軽めの内容でした。
基本的にはエンジニア同士を交流する場をつくったよ！という感じでした。&lt;/p&gt;
&lt;p&gt;そういったライトな内容だったこともあり、会の雰囲気はかなりアットホームなほっこりタイプでした。笑&lt;/p&gt;
&lt;p&gt;前日に行ったSpring Festが、堅めの内容だったこともあり、React会のゆるさが良い感じに思えました。
交流を目的とする場合は、ある程度ゆるい雰囲気作りも必要なんだなと感じました。&lt;/p&gt;
&lt;h1&gt;Hooksについて&lt;/h1&gt;
&lt;p&gt;まず、&lt;code class=&quot;language-text&quot;&gt;Hooks&lt;/code&gt; について色々と知れてよかったです。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Hooks&lt;/code&gt;とは、従来はサードパーティ製ライブラリで実現されていたHoCがReact公式にサポートされたものらしい。
従来のライブラリでいうと&lt;code class=&quot;language-text&quot;&gt;recompose&lt;/code&gt;とかそういったやつですね。
認識に誤りがあったらごめんなさい。&lt;/p&gt;
&lt;p&gt;ちなみに&lt;code class=&quot;language-text&quot;&gt;recompose&lt;/code&gt;の作者はFacebookに採用されて、&lt;code class=&quot;language-text&quot;&gt;Hooks&lt;/code&gt;の開発に携わったそうな。
そういった背景もあり、&lt;code class=&quot;language-text&quot;&gt;recompose&lt;/code&gt;は今後はメンテナンスされないそうです（え…&lt;/p&gt;
&lt;p&gt;個人的にはHoCをあんまり利用していないので&lt;code class=&quot;language-text&quot;&gt;Hooks&lt;/code&gt;の旨味がぱっと理解できないので、
ちょっと様子見かなといったところです。&lt;/p&gt;
&lt;p&gt;でもReact Hooksを導入した経緯の
「Class ComponentでReactがStateを持ってしまっていたのを改善したい
今後はFunctional Componentを中心としてStatelessなものとしていきたい」
という考え方にはとても賛同してます。&lt;/p&gt;
&lt;p&gt;実際にReactComponentを作っていると、Statefulなものを作ってしまうと複雑性が増してしまうので
あまり好みではなかったんですよね。&lt;/p&gt;
&lt;p&gt;なので、大体のコンポーネントはFunctional Componentをベースとして作っています。
ページのライフサイクル等がひつようなところだけ、Class Componentを使用していました。
&lt;code class=&quot;language-text&quot;&gt;Hooks&lt;/code&gt;が導入されたことでページのライフサイクルをどう扱わうのか？みたいなところも興味あります。&lt;/p&gt;
&lt;h1&gt;Hooks以外に気になったこと&lt;/h1&gt;
&lt;p&gt;個人的には「expo.ioを利用したReact Nativeの爆速開発」が気になりました。
最近、React Nativeがちょっと気になっていたのでトライしてみようと改めて思わせてくれました。&lt;/p&gt;
&lt;p&gt;React Nativeの良いところって、デリバリーの速さだと思うんですよね。
何に使うかというと、プロトタイプの作成や実証実験のとき役立つと考えてます。
実証実験のときは、特に開発サイクルの速さが鍵になってくるのでReact Nativeに勝ち筋があると思ってます。
（iOSアプリの場合はTestFlightもありますが、どうしてもスピード感がでないことがありました。）&lt;/p&gt;
&lt;p&gt;短期的に開発するならReact Nativeで作り、アプリに価値があるのか検証する。
価値があると分かったら、Swiftでしっかり作りなおす。というのが考えれるかなと。
（React Native -&gt; Swift の移行コストはどうするのか？というのは課題ですが…）&lt;/p&gt;
&lt;p&gt;あとは、やまたつさんのスライドがどうやって作ったのは非常に気になった。笑
だってスライドの中で、Reactがライブコーディングできちゃうんだもの。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://slides.yamatatsu193.net/react-hook/#0&quot;&gt;https://slides.yamatatsu193.net/react-hook/#0&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;ざっくりと感想&lt;/h1&gt;
&lt;p&gt;connpass上にあるReact関連の勉強会グループでは「React.js Meetup」があるけど、
長らく開催されていないので、新しいグループができたのでありがたいなーと思い参加しました。&lt;/p&gt;
&lt;p&gt;と、思ったら今回は最初で最後のReact会になるとのこと。笑&lt;/p&gt;
&lt;p&gt;というのも、「React.js Meetup」運営側から声がかかり合流するそうな。&lt;/p&gt;
&lt;p&gt;参加側としても、日本のReactユーザの交流が活発になることが目的なので歓迎です。
ということで、Raect.js Meetupの勉強会がまた頻繁に行われるといいなと思ってます。&lt;/p&gt;
&lt;p&gt;そして参加するだけでなく、そろそろLTだったりで発表するようにしたいなと思い始めました。
今回のReact会に参加してみて、自分のReactのスキルレベルは中級くらいと認識しました。
中級から少し上級に背伸びしていきたいと改めて思ったところ。&lt;/p&gt;
&lt;p&gt;自身のReactの使用状況とすると、業務でReactを使用して約1年でチーム内ではフロントをリードする役割を持ってます。
なので実装指針の決定や、ライブラリ側の挙動を起源とする不具合に対応したりしています。
とはいえどもサーバサイドエンジニアとの兼務なので、そこまで深くReactに関わっていない状態です。&lt;/p&gt;
&lt;p&gt;自分の中での初級・上級の定義をいうと、こんな感じ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上級：Reactの内側を知っており、最新動向を追っている。自身の設計思想を基に実装指針を改善していける人。&lt;/li&gt;
&lt;li&gt;中級：初級でもなく、上級でもない。どっちつかずの状態。&lt;/li&gt;
&lt;li&gt;初級：趣味や業務で軽くReactを触った程度。まだ色々と知らないことが多い。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上級に背伸びするために今後は、最新動向を追って新機能がでたら実際に手を動かしてみようと思います。
今回でいうと、&lt;code class=&quot;language-text&quot;&gt;React Hooks&lt;/code&gt;ですね。
業務で書いていることも&lt;code class=&quot;language-text&quot;&gt;Hooks&lt;/code&gt;に対応していかないといけないので、早めにサンプルコードを作ろうと思います。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Fest 2018 参加レポート]]></title><description><![CDATA[イベント概要 日時： 2018年10月31日 10:00 - 18:30 場所： 両国　KFCホール（チキンとは関係なかた） URL：  http://springfest2018.springframework.jp/ 主催：Spring…]]></description><link>https://tkrplus.github.io/niwalab-mdblog//20181031/</link><guid isPermaLink="false">https://tkrplus.github.io/niwalab-mdblog//20181031/</guid><pubDate>Wed, 31 Oct 2018 01:50:21 GMT</pubDate><content:encoded>&lt;h1&gt;イベント概要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;日時： 2018年10月31日 10:00 - 18:30&lt;/li&gt;
&lt;li&gt;場所： 両国　KFCホール（チキンとは関係なかた）&lt;/li&gt;
&lt;li&gt;URL： &lt;a href=&quot;http://springfest2018.springframework.jp/&quot;&gt;http://springfest2018.springframework.jp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;主催：Spring日本ユーザ会。その他スポンサーは割とTech系とSIer系とIT教育系&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;どんなイベントだった？&lt;/h1&gt;
&lt;p&gt;今回のイベントでのホットワードは以下の３つかなと個人的に感じた&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Micro Service&lt;/li&gt;
&lt;li&gt;Serverless&lt;/li&gt;
&lt;li&gt;Agile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;個人的にはこの3つは切り離せない関係にあると思っている。
マイクロサービスを実現するには、小さいチームでも成り立つようにサーバレスで運用作業を軽減する。
マイクロサービスを実現するために、小さいチームのパフォーマンスをアジャイルで最大化する。&lt;/p&gt;
&lt;p&gt;特にJava系のイベントということで、他の勉強会に比べて堅いというかレガシーというか、
そういったところに所属している参加者が多かった。
ただ、硬くレガシーな人も課題感はもっており、転換するためにどうするか？
という考えを持ってSpringに向き合いに来た感じはあった。&lt;/p&gt;
&lt;p&gt;意外にKotlinに対する興味は皆持っているようだった。
自分も参加したが、Kotlinに関するセッションでは立ち見がかなり発生していた。
懇親会でも、Kotlinどう思う？みたいな話はちょくちょくあった。&lt;/p&gt;
&lt;p&gt;後述しますが、Kotlin x SpringBoot2.0は試したことがあり、良い印象をもっている。
Kotlinはゆくゆく導入したいなーという考えがあるので、ちゃんとアンテナをはっておこうと思った。&lt;/p&gt;
&lt;p&gt;最後に普通の感想として…&lt;/p&gt;
&lt;p&gt;同じSI系の人と話ができたのが嬉しかった。
特に、SIの古さを感じて「どうにかしたい！」と思っている人と会話できたのが、
今回最大の収穫でした。&lt;/p&gt;
&lt;p&gt;あと、FLUX、Reactiveに対する誤解が溶けたのも地味に良い収穫だった。笑&lt;/p&gt;
&lt;h1&gt;Sessions&lt;/h1&gt;
&lt;h2&gt;エンタープライズ・マイクロサービスの格言&lt;/h2&gt;
&lt;p&gt;Agenda&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;エンタープライズ系システムのマイクロサービス化、それが、エンタープライズ・マイクロサービス。 Spring Fest 2017の「日本一やさしいマイクロサービス入門」の続編的ハナシとして、エンタープライズ・マイクロサービスを上手くやるための格言などを噺します。 真面目なセッションで疲れてしまった貴方の頭が休まるセッション(!?)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;プロジェクトをスケールする手段として、マイクロサービス(MS)化を選んでいきたいなと思っているこの頃。
エンタープライズ向けマイクロサービスというタイトルに惹かれて参加。&lt;/p&gt;
&lt;p&gt;一応、自分が担当しているプロジェクトはマイクロサービスといえるのかな…？と思う。&lt;/p&gt;
&lt;p&gt;「オブジェクト指向がわからないのに、マイクロサービスに飛びついてもできる訳がない」という言葉には完全に同意。&lt;/p&gt;
&lt;p&gt;自分も「マイクロサービスってなんですか？」って聞かれてたときに
プログラムでオブジェクト指向がベストプラクティスとされてますよね。
それをサービスレベルでオブジェクト指向していった結果がマイクロサービスだと思う。
といったりする。&lt;/p&gt;
&lt;h3&gt;企画編&lt;/h3&gt;
&lt;p&gt;エンタープライズ経過得意なSI企業はマイクロサービス・アーキテクチャでのシステム開発に向かない。
理由：開発の方法がレガシー。MSは試行錯誤が多いので、管理を重んじるSI企業ではスピード感で出ずにより難しくなっている。&lt;/p&gt;
&lt;p&gt;MSの切り分けの単位は、最初は主観的な粒度で良い
必要があれば、徐々に粒度を細かくすれば良い。（大きくなってきたら、分割するみたいな考え方？）
その際に、ドメイン駆動設計(DDD)を取り入ればなお良い。&lt;/p&gt;
&lt;p&gt;開発プロセスはアジャイルが良い。
基本的にMSは探索的な開発になるので、手戻りが難しいウォーターフォール(WF)型は難しいんじゃないかなというところ。
個人的にも、ちょっとした失敗・手戻りでも管理をしなきゃいけないWF型はMSに向かないと思ってる。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;エンターブライズなシステム開発では、技術スキルの低さが問題となる。
優秀なチームリーダを配置することで最低限の品質をチームリーダで保証していく。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;チーム単位では、技術レベルの高さは求められるのがMSなので、
これも１つの解決方法なのかなーと思ったりする。&lt;/p&gt;
&lt;h3&gt;開発編&lt;/h3&gt;
&lt;p&gt;共通処理はやめる。
業務ロジックなどの共通処理を作ってしまうと、サービス間で結合が生まれてしまう。
共通処理を作るくらいなら、別MSとして切り出せないか考えたほうが良い。&lt;/p&gt;
&lt;p&gt;実際の開発では、共通処理を作るべきか否かは、その処理の大きさによるのかなと思った。
その損益分岐点の見極めはアーキテクトとしての腕の見せどころかな。&lt;/p&gt;
&lt;p&gt;MSはテストをちゃんと作らなければならない。
MSの進化を短時間で行うためには、リグレッションを保証していくことが必要。
CI環境の重要性はWF型よりも大切になってくる。&lt;/p&gt;
&lt;p&gt;UTの実行速度は大切。（プルリクでUT時間かかりすぎてマージできない問題）
&lt;code class=&quot;language-text&quot;&gt;@SpringBootTest&lt;/code&gt; は時間がかかりすぎる（不要にAPサーバを起動しない&lt;/p&gt;
&lt;p&gt;マイクロサービスでは、トランザクションの難しさはある。
そもそも、トランザクションの難度を下げるような設計思想を持ったほうがいいと気持ちを改めた。&lt;/p&gt;
&lt;h2&gt;実際のプロジェクトでSpringアプリをKotlinで開発して得た気づき集&lt;/h2&gt;
&lt;p&gt;Speacker: &lt;a href=&quot;https://taro.hatenablog.jp/&quot;&gt;https://taro.hatenablog.jp/&lt;/a&gt;
Agenda:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SpringはかねてよりKotlinをサポートしていましたが、Spring Framework 5.0でよりKotlinフレンドリなAPIを提供し始めました。本セッションでは、SpringアプリをKotlinで開発する基本的な話と、実際の開発を経験して得られた知見をTips集のような形で共有します。
本セッションを聴いていただき、Kotlinへの関心を高め、Kotlin x Springにありがちな落とし穴を回避する策を学んでいただければ幸いです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;KotlinでSpringアプリを始める&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@Service&lt;/code&gt; などがついたクラスはSpringによってサブクラスが生成される。
そのため、デフォルトでfinal classなKotlinは気をつけないといけない。
これでは開発しづらいので、kotlin-springプラグインを使用すると良い。
Kotlin-spingプラグインはSpring Anotationのついたクラスをallopenの対象として扱ってくれる。&lt;/p&gt;
&lt;p&gt;Validationに注意。
&lt;code class=&quot;language-text&quot;&gt;@NonNull&lt;/code&gt; のようなものは &lt;code class=&quot;language-text&quot;&gt;@field:Notnull&lt;/code&gt;としてやる必要がある。
KotlinがJavaにコンパイルされたときの形を考える必要がまだ何箇所かである。&lt;/p&gt;
&lt;p&gt;int? はInteger, intはint扱いになるので、注意しよう。&lt;/p&gt;
&lt;h3&gt;WebFluxとコルーチン&lt;/h3&gt;
&lt;p&gt;リアクターなところを、コルーチンを使用すると可読性を上げることができる。
コルーチンってなんだ？＝ asyncとかawaitとかやつ？&lt;/p&gt;
&lt;p&gt;JSでPromiseの可読性が悪くなるので、async, awaitを使ってあげましょう。
という話と似たものがありそう。&lt;/p&gt;
&lt;h3&gt;アノテーションをやめる&lt;/h3&gt;
&lt;p&gt;アノテーションを削除する代わりに、自分でBean登録してやろうという話。&lt;/p&gt;
&lt;p&gt;以下、サンプルコード&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;kotlin&quot;&gt;&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token function&quot;&gt;SpringAppicationBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;DemoApplication&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;java&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initializers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;beans &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;      bean &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DemoService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;      bean &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DemoController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// DIは型推論によって解決してくれる&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;      bean &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        router &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;          &lt;span class=&quot;token function&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/demo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;            ref&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;DemoController&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;helloWorld&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 型推論ができないものは自身で設定&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;アノテーションに馴染んでいるものからすると、あまりメリットを感じない。&lt;/p&gt;
&lt;h3&gt;テスト！&lt;/h3&gt;
&lt;p&gt;Kotlinテスト周辺ツールは下記らしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JUnit5&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@Nested&lt;/code&gt;を使用した、メソッドグルーピングがわかりやすい。（Javaでも使用可能）&lt;/li&gt;
&lt;li&gt;JUnit5になったことで、最近のプログラミング言語っぽく技術ができるようになってそうに見えた。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AssertJ&lt;/li&gt;
&lt;li&gt;MockK&lt;/li&gt;
&lt;li&gt;DbSetup-kotlin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kotlin 1.3から文脈からNotNullを推定してくれる機能がついた。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;kotlin&quot;&gt;&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token comment&quot;&gt;// 従来はitem?.nameという記述が必要だった。&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MockitoでKotlinクラスをmockしようとして失敗したのは良い思い出。
&lt;code class=&quot;language-text&quot;&gt;final&lt;/code&gt;だったからできなかったのだが、MockKを使用すればmockできるそうな。&lt;/p&gt;
&lt;h3&gt;感想&lt;/h3&gt;
&lt;p&gt;Kotlin1.1 x SpringBoot2.0を2018年3月くらいに触ったことがあります。
当時は、ちょっと使いづらいなぁという部分がいくつかありました。
半年経ってKotlin1.3はだいぶ進化していて、PJで使えるようになってそうと感じた。&lt;/p&gt;
&lt;h2&gt;Knative: Serving your Serverless Java Service on Kubernetes the 12-Factor way&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://slidr.io/kameshsampath/knative-serving-your-serverless-services#1&quot;&gt;https://slidr.io/kameshsampath/knative-serving-your-serverless-services#1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.openshift.com/knative-serving-your-serverless-services/&quot;&gt;https://blog.openshift.com/knative-serving-your-serverless-services/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.openshift.com/knative-building-your-serverless-service/&quot;&gt;https://blog.openshift.com/knative-building-your-serverless-service/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.openshift.com/knative-configurations-routes-and-revisions/&quot;&gt;https://blog.openshift.com/knative-configurations-routes-and-revisions/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Japanese Nativeには辛い英語セッションでした。&lt;/p&gt;
&lt;p&gt;Knativeは強力そう。ということが分かったので帰ったら調べてみたいと思うところ。&lt;/p&gt;
&lt;h2&gt;基礎からのOAuth 2.0とSpring Security 5.1による実装&lt;/h2&gt;
&lt;p&gt;Agenda:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OAuth 2.0は、Web APIでよく利用される認可プロトコルです。Spring Securityでは、5.0でクライアント機能、5.1でリソースサーバー機能が追加されました。このセッションでは、前半でOAuth 2.0についてはじめから丁寧に解説します。そして後半では、Spring Security5.1のクライアント機能やリソースサーバー機能を、実装例を交えながら紹介します。認可サーバーはDocker + Keycloakで構築します）
OAuth2.0の名前を聞いたことはあるけど詳細は知らない・・・という方にピッタリのセッションです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Spring Sercurity 5.0から、OAuth2.0を標準搭載。
以前はSpring Sercurity OAuth2等を使用していた。
Spring Sercurity 5はクライント・リソースサーバ側のみ対応。認可サーバは5.2以降から順次展開予定
（ただし、少しずつ認可機能が追加されるので、フル機能をもった認可はまだ先の話だそうな。&lt;/p&gt;
&lt;p&gt;Spring Sercurity OAuthは分かりづらいという話があったが、ホントにそうだと思う。&lt;/p&gt;
&lt;p&gt;実際、ドキュメント少なすぎて生のソースコードを読み解いて理解したのは良い思い出。
今回、SpringがOAuth機能を新たに作り直してSpring Security標準搭載させたのは英断だと思ってる。&lt;/p&gt;
&lt;p&gt;近いうちに、Spring Security 5系を使って、クライアントサーバを試してみようかなと。&lt;/p&gt;
&lt;p&gt;使用していたpackageたち。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;spring-security-oauth-client
spring-security-oauth-resource&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Tips&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;技術評論社「間違いだらけのソフトウェア・アーキテクチャ」&lt;/li&gt;
&lt;li&gt;オライリー「effective devops」&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[GatsbyでBlogを始めてみました。]]></title><description><![CDATA[GatsbyでBlogを始めてみました。 半年ほど前から、そろそろブログを始めてみようかなと考えていました。 ブログを作ろうと思った動機をつらつらとあげると、だいたいこんな感じ。 IT…]]></description><link>https://tkrplus.github.io/niwalab-mdblog//20181023/</link><guid isPermaLink="false">https://tkrplus.github.io/niwalab-mdblog//20181023/</guid><pubDate>Tue, 23 Oct 2018 22:40:32 GMT</pubDate><content:encoded>&lt;h1&gt;GatsbyでBlogを始めてみました。&lt;/h1&gt;
&lt;p&gt;半年ほど前から、そろそろブログを始めてみようかなと考えていました。&lt;/p&gt;
&lt;p&gt;ブログを作ろうと思った動機をつらつらとあげると、だいたいこんな感じ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IT技術的なことを、ちゃんと発信していかないとなぁという課題感&lt;/li&gt;
&lt;li&gt;そもそも文章を書くことが苦手なので、その練習&lt;/li&gt;
&lt;li&gt;まとまった形で技術メモを残す場所が欲しかった&lt;/li&gt;
&lt;li&gt;何かしら家でプログラミングしたかったので、ブログ作りは良い題材かなと&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といったところで、このブログでは基本的には技術を発信する場として使用したいと考えてます。&lt;/p&gt;
&lt;p&gt;たまに、日常的なことやコラムみたいなものも載せるかもしれない。&lt;/p&gt;
&lt;h2&gt;ブログツールの選定&lt;/h2&gt;
&lt;p&gt;個人でブログを作るにあたって、世の中には数多のブログツールがありますよ。&lt;/p&gt;
&lt;p&gt;自分の中で選択肢として下のものが考えられました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WordPress&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不採用：2年前にトライしてやめたことあり。今回のブログで不採用となった理由は、いまさらPHP？というところと、サーバ代がネックになりそうだなぁという気持ち。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hatena&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不採用：一番簡単に始められそう。だけれども、技術的に面白くないなと思ったのでやめました。（変にやりたがりだから、やらずじまいになることが多いんだな。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;フルスクラッチ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不採用：サーバサイドはWPで、フロントはSPAなんてことも考えたりもしました。ただ、上述のWPの通りサーバ代がネック。そして、SPAを作り切る体力がなさそうだった。（WP使用ってフルスクラッチちゃうやんというのは置いておいてください。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hugo&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不採用：ここはちょっと気持ちが惹かれた。特にGoを使用しているところ。ただ、内部はGOで書かれているけどブログを書く上では、あまりGOを使用するわけでもなさそうだったので却下。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gatsby&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;採用◎：静的ページで済むのでCDNさえあれば良いというのが圧倒的魅力。そして、ベースがReactなのも◎。業務で一部Reactを使用しているので、Reactについて深掘りできたら良いなという気持ちもある。そして、なによりMarkdownでブログをかけるのは嬉しい。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということで、今回は &lt;code class=&quot;language-text&quot;&gt;Gatsby&lt;/code&gt; を使用してみました。&lt;/p&gt;
&lt;h2&gt;これからの工程&lt;/h2&gt;
&lt;p&gt;ということで、最初の記事を書いてみました。&lt;/p&gt;
&lt;p&gt;これから下記の工程でブログを作り上げていけたらなと計画しています。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GitHub Pagesへの公開&lt;/li&gt;
&lt;li&gt;適当なCDNでの公開（GCP? Netlify?）&lt;/li&gt;
&lt;li&gt;CircleCI等を使用したAutoDeploy&lt;/li&gt;
&lt;li&gt;eslint, textlint等のLinterの設定&lt;/li&gt;
&lt;li&gt;Linterをプルリクエストで動くようにする&lt;/li&gt;
&lt;li&gt;空ページを作るスクリプト&lt;/li&gt;
&lt;li&gt;Gatsby Pluginの導入&lt;/li&gt;
&lt;li&gt;デザイン・テーマの変更。&lt;/li&gt;
&lt;li&gt;プロフィール等のよくあるページの追加&lt;/li&gt;
&lt;li&gt;JSXあたりでのカスタマイズ&lt;/li&gt;
&lt;li&gt;ドメイン取る&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ということで、よろしくおねがいします。&lt;/p&gt;</content:encoded></item></channel></rss>